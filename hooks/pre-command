#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

ecr_exists() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].registryId'
}

upsert_ecr() {
  local repository_name="${1}"
  if ! ecr_exists "${repository_name}"; then
    aws ecr create-repository --repository-name "${repository_name}"
  fi
}

compute_tag() {
  local docker_file="$1"
  local sums

  sums="$(sha1sum "${docker_file}")"

  while IFS='=' read -r name _ ; do
    if [[ ${name} =~ ^(BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_CACHE_ON_[0-9]+) ]] ; then
      sums="${sums}$(sha1sum "${!name}")"
    fi
  done < <(env | sort)
  echo "${sums}" | sha1sum | cut -c-7
}

$(aws ecr get-login --no-include-email)
default_repository_name="build-cache/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
repository_name="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_ECR_NAME:-${default_repository_name}}"
upsert_ecr "${repository_name}"
docker_file="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_DOCKERFILE:-Dockerfile}"
image_name="$(get_ecr_url "${repository_name}"):$(compute_tag "${docker_file}")"

target_args=()
if [[ -n ${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET:-} ]]; then
  target_args+=('--target' "${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET}")
fi

if ! docker pull "${image_name}"; then
  echo "Image not cached, building"
  docker build . --file "${docker_file}" --tag "${image_name}" "${target_args[@]}" || exit 1
  docker push "${image_name}"
fi || echo "Not found"

# Support using https://github.com/buildkite-plugins/docker-buildkite-plugin without an image
export BUILDKITE_PLUGIN_DOCKER_IMAGE="${image_name}"

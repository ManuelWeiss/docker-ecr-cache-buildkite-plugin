#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

ecr_exists() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].registryId'
}

upsert_ecr() {
  local repository_name="${1}"
  if ! ecr_exists "${repository_name}"; then
    aws ecr create-repository --repository-name "${repository_name}"
  fi
}

read_build_args() {
  if read_list_property 'BUILD_ARGS'; then
    for arg in "${result[@]}"; do
      build_args+=('--build-arg' "${arg}")
    done
  fi
}

# read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
read_list_property() {
  local prefix="BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_${1}"
  local property="${prefix}_0"

  result=()

  if [[ -n ${!property:-} ]]; then
    local i=0
    local property="${prefix}_${i}"

    while [[ -n ${!property:-} ]]; do
      result+=("${!property}")

      i=$((i+1))
      property="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    result+=("${!prefix}")
  fi

  [[ ${#result[@]} -gt 0 ]] || return 1
}

compute_tag() {
  local docker_file="$1"
  local sums

  sums="$(sha1sum "${docker_file}")"

  if read_list_property 'CACHE_ON'; then
    for file in "${result[@]}"; do
      sums="${sums}$(sha1sum "${file}")"
    done
  fi

  echo "${sums}" | sha1sum | cut -c-7
}

$(aws ecr get-login --no-include-email)
default_repository_name="build-cache/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
repository_name="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_ECR_NAME:-${default_repository_name}}"
upsert_ecr "${repository_name}"
docker_file="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_DOCKERFILE:-Dockerfile}"
image="$(get_ecr_url "${repository_name}")"
tag="$(compute_tag "${docker_file}")"

target_args=()
if [[ -n ${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET:-} ]]; then
  target_args+=('--target' "${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET}")
fi

build_args=()
read_build_args

if ! docker pull "${image}:${tag}"; then
  echo '--- Building image'
  docker build \
  --file "${docker_file}" \
  --tag "${image}:${tag}" \
  ${build_args[@]+"${build_args[@]}"} \
  ${target_args[@]+"${target_args[@]}"} \
  . || exit 1

  docker tag "${image}:${tag}" "${image}:latest"

  echo "--- Pushing tag ${tag}"
  docker push "${image}:${tag}"

  echo "--- Pushing tag latest"
  docker push "${image}:latest"
fi || echo "Not found"

# Support using https://github.com/buildkite-plugins/docker-buildkite-plugin without an image
export BUILDKITE_PLUGIN_DOCKER_IMAGE="${image}:${tag}"

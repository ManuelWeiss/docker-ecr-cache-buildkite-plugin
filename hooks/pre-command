#!/usr/bin/env bash

set -euo pipefail
# shellcheck source=lib/stdlib.bash
source "$(dirname "${BASH_SOURCE[0]}")/lib/stdlib.bash" || exit 67
source "$(dirname "${BASH_SOURCE[0]}")/lib/${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_REGISTRY_PROVIDER:-"ecr"}-registry-provider.bash" ||
  log_fatal "Failed to source registry-provider. BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_REGISTRY_PROVIDER must be set to one of [ecr, gcr]" 67

login
configure_registry_for_image_if_necessary
image="$(get_registry_url)"
docker_file="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_DOCKERFILE:-"Dockerfile"}"
target="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET:-}"
export_env_variable="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_EXPORT_ENV_VARIABLE:-"BUILDKITE_PLUGIN_DOCKER_IMAGE"}"
exec 3>&1
tag="$(compute_tag "${docker_file}" 2>&3)"
context="$(dirname "${docker_file}")"

build_args=()
read_build_args

echo "--- Pulling image"
if ! docker pull "${image}:${tag}"; then
  echo '--- Building image'
  image_build_args=(
    "build"
    "--file=${docker_file}"
    "--tag=${image}:${tag}"
  )
  if [[ -n "${target:-}" ]]; then
    image_build_args+=(
      "--target=${target}"
    )
  fi
  if [[ "${#build_args[@]}" -gt 0 ]]; then
    for ba in "${build_args[@]}"; do
      image_build_args+=(
        "${ba}"
      )
    done
  fi

  echo "Inside $(pwd), running \`docker ${image_build_args[*]} ${context}\`"
  # We can't quote BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_ADDITIONAL_BUILD_ARGS, because it's passed here as a string instead of a bash array.
  # shellcheck disable=SC2086
  docker "${image_build_args[@]}" ${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_ADDITIONAL_BUILD_ARGS:-} "${context}" ||
    log_fatal "^^^ +++" 1

  docker tag "${image}:${tag}" "${image}:latest"

  echo "--- Pushing tag ${tag}"
  docker push "${image}:${tag}"

  echo "--- Pushing tag latest"
  docker push "${image}:latest"
fi || echo "Not found"

# Support using https://github.com/buildkite-plugins/docker-buildkite-plugin without an image by default
export ${export_env_variable}="${image}:${tag}"
